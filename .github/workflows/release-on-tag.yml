name: release-on-tag

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write   # create/update releases
  issues: write     # if your notes script opens issues (safe to keep)
  actions: read

concurrency:
  group: release-on-tag-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    env:
      CI: true
      # Quiet Nx + avoid daemon in CI
      NX_DAEMON: "false"
      NX_NO_CLOUD: "true"
      # Silence Next.js telemetry
      NEXT_TELEMETRY_DISABLED: "1"
      # Handy tag var
      TAG: ${{ github.ref_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install deps
        run: pnpm install --frozen-lockfile
      - name: Prisma Client generation
        run: |
          set -e
          SCHEMA=$(git ls-files | grep -E '/prisma/schema\.prisma
      - name: Build + Test + Final Scan
        run: pnpm run release:prep
        timeout-minutes: 25

      - name: Upload scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scans-${{ env.TAG }}
          if-no-files-found: warn
          retention-days: 7
          path: |
            scans/**
            tools/logs/**
            web/.next/**

      - name: Generate release notes
        id: notes
        run: |
          node tools/scripts/gen-release-notes.cjs > RELEASE_NOTES.md
          echo "notes_path=RELEASE_NOTES.md" >> "$GITHUB_OUTPUT"

      - name: Create / Update GitHub Release + Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          body_path: ${{ steps.notes.outputs.notes_path }}
          make_latest: true
          files: |
            scans/**/*.json
            tools/logs/**/*.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify release has expected assets
        run: |
          gh release view "$TAG" --json tagName,assets,createdAt
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 | head -n1 || true)
          if [ -n "$SCHEMA" ]; then
            pnpm dlx prisma generate --schema=apps/api/prisma/schema.prisma
          else
            pnpm dlx prisma generate --schema=apps/api/prisma/schema.prisma
          fi

      - name: Build + Test + Final Scan
        run: pnpm run release:prep
        timeout-minutes: 25

      - name: Upload scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scans-${{ env.TAG }}
          if-no-files-found: warn
          retention-days: 7
          path: |
            scans/**
            tools/logs/**
            web/.next/**

      - name: Generate release notes
        id: notes
        run: |
          node tools/scripts/gen-release-notes.cjs > RELEASE_NOTES.md
          echo "notes_path=RELEASE_NOTES.md" >> "$GITHUB_OUTPUT"

      - name: Create / Update GitHub Release + Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          body_path: ${{ steps.notes.outputs.notes_path }}
          make_latest: true
          files: |
            scans/**/*.json
            tools/logs/**/*.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify release has expected assets
        run: |
          gh release view "$TAG" --json tagName,assets,createdAt
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
