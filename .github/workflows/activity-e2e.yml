name: Activity E2E

on:
  pull_request:
  workflow_dispatch:

concurrency:
  group: e2e-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Intentionally no sparse-checkout: we want the whole repo so apps/api/** is present

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install

      # >>> PRISMA-AUTO-GEN:BEGIN
      - name: Prisma format/validate (all schemas)
        run: |
          set -euo pipefail
          mapfile -t SCHEMAS < <(git ls-files -z | tr '\0' '\n' | grep -E "/prisma/schema\.prisma$" || true)
          if [ ${#SCHEMAS[@]} -eq 0 ]; then
            echo "::notice ::No prisma/schema.prisma found; skipping Prisma steps"
            exit 0
          fi
          for s in "${SCHEMAS[@]}"; do
            echo "Validating $s"
            pnpm -w exec prisma format --schema="$s"
            pnpm -w exec prisma validate --schema="$s"
          done

      - name: Generate Prisma Client (all schemas)
        run: |
          set -euo pipefail
          mapfile -t SCHEMAS < <(git ls-files -z | tr '\0' '\n' | grep -E "/prisma/schema\.prisma$" || true)
          if [ ${#SCHEMAS[@]} -eq 0 ]; then
            echo "No prisma schemas; nothing to generate"
            exit 0
          fi
          node tools/scripts/prisma-generate-all.cjs
      # <<< PRISMA-AUTO-GEN:END

        run: pnpm -w install --frozen-lockfile

      - name: Discover Prisma schema (and export PRISMA_SCHEMA)
        id: discover-schema
        run: |
          set -euo pipefail
          echo "CWD=$(pwd)"
          echo "Workspace=$GITHUB_WORKSPACE"
          echo "Repo tree (top-level):"; ls -la
          SCHEMA="$(find . -maxdepth 6 -type f -path '*/prisma/schema.prisma' | head -n1 || true)"
          if [ -z "${SCHEMA:-}" ]; then
            echo "::error ::No prisma/schema.prisma found in repo"
            echo "Schemas I can find (none expected below):"
            find . -maxdepth 6 -type f -name schema.prisma -print || true
            exit 1
          fi
          echo "Using schema: $SCHEMA"
          echo "PRISMA_SCHEMA=$SCHEMA" >> "$GITHUB_ENV"

      - name: Prisma format/validate
        run: |
          pnpm -w exec prisma format --schema="$PRISMA_SCHEMA"
          pnpm -w exec prisma validate --schema="$PRISMA_SCHEMA"

      - name: Generate Prisma Client
        run: pnpm -w exec prisma generate --schema="$PRISMA_SCHEMA"

      - name: Build (recursive)
        run: pnpm -r --if-present run build

      - name: Install Playwright browsers
        run: pnpm -w exec playwright install --with-deps

      - name: Debug CWD and prisma path
        run: |
          pwd; ls -la
          echo "PRISMA_SCHEMA=$PRISMA_SCHEMA"

      - name: Run E2E
        run: pnpm -w exec playwright test

      - name: Upload Playwright traces (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trace
          path: |
            **/test-results/**/trace.zip
            **/test-results/**/trace/*.zip
          if-no-files-found: ignore
