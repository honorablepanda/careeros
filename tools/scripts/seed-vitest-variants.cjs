#!/usr/bin/env node
/* seed-vitest-variants.cjs
 * Generate Vitest matrix variants so the fuzzer/runner has real variety.
 *
 * Usage:
 *   node tools/scripts/seed-vitest-variants.cjs           # create/update C1..C5 + TRPC stub + setup seeds (no overwrite if identical)
 *   node tools/scripts/seed-vitest-variants.cjs --force   # overwrite even if exists
 *   node tools/scripts/seed-vitest-variants.cjs --only=config|setup|trpc
 *   node tools/scripts/seed-vitest-variants.cjs --root web   # if your web app folder differs
 */
'use strict';

const fs = require('fs');
const path = require('path');

const args = new Set(process.argv.slice(2));
const FORCE = args.has('--force');
const ONLY =
  args.has('--only=config') ? 'config' :
  args.has('--only=setup')  ? 'setup'  :
  args.has('--only=trpc')   ? 'trpc'   : null;

const rootFlagIdx = process.argv.findIndex((v) => v === '--root');
const webRoot = rootFlagIdx > -1 ? (process.argv[rootFlagIdx + 1] || 'web') : 'web';

const repoRoot = process.cwd();
const webDir = path.resolve(repoRoot, webRoot);
const webSrc = path.resolve(webDir, 'src');
const setupFile = path.resolve(webDir, 'test', 'setup-tests.ts');

const matrixRoot = path.resolve(repoRoot, 'tools', 'vitest-matrix');
const setupDir  = path.join(matrixRoot, 'setup');
const configDir = path.join(matrixRoot, 'config');
const trpcDir   = path.join(matrixRoot, 'trpc');

const aliasAt = toPosix(webSrc); // bake into config files

function toPosix(p) { return p.split(path.sep).join('/'); }

function ensureDir(d) {
  fs.mkdirSync(d, { recursive: true });
}

function writeFileNice(file, content) {
  if (fs.existsSync(file)) {
    const prev = fs.readFileSync(file, 'utf8');
    if (!FORCE && prev === content) {
      log(`· up-to-date ${rel(file)}`);
      return { wrote: false, reason: 'same' };
    }
  }
  fs.writeFileSync(file, content, 'utf8');
  log(`${fs.existsSync(file) ? '✓ wrote' : '✓ created'} ${rel(file)}`);
  return { wrote: true };
}

function rel(p) { return path.relative(repoRoot, p).split(path.sep).join('/'); }
function log(...m) { console.log(...m); }

// ---------- CONTENT TEMPLATES ----------

const includeNarrow = `['specs/**/*.spec.{ts,tsx}', 'src/**/*.spec.{ts,tsx}']`;
const excludeCommon = `['**/*.e2e.*','web-e2e/**','api-e2e/**','apps/**','packages/**','shared/**','node_modules','dist','build','coverage']`;

const header = (name) => `// ${name}\n// Auto-generated by tools/scripts/seed-vitest-variants.cjs\n`;

function configTs({ name, environment, pool }) {
  const envOptions =
    environment === 'jsdom'
      ? `environmentOptions: { jsdom: { url: 'http://localhost' } },`
      : ``;

  return `${header(name)}import { defineConfig } from 'vitest/config';
export default defineConfig({
  test: {
    environment: '${environment}',
    ${envOptions}
    include: ${includeNarrow},
    exclude: ${excludeCommon},
    globals: true,
    pool: '${pool}',
    isolate: true,
    setupFiles: ['test/setup-tests.ts']
  },
  esbuild: { jsx: 'automatic' },
  resolve: { alias: { '@': '${aliasAt}' } },
});
`;
}

const trpcStub = `// tools/vitest-matrix/trpc/T1-trpc-stub.ts
// Minimal TRPC client + no-op provider for tests (NO JSX so it is valid .ts)
import React from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';

// Roughly match your app's usage surface
export const trpc = {
  tracker: {
    getApplications: {
      useQuery: (_input?: unknown, _opts?: unknown) => ({
        data: { applications: [
          { id: '1', company: 'Acme', role: '—', status: 'APPLIED', updatedAt: null },
          { id: '2', company: 'Globex', role: '—', status: 'INTERVIEW', updatedAt: null },
        ] },
        isLoading: false,
        error: null,
      }),
    },
  },
  settings: {
    get: {
      useQuery: () => ({
        data: { theme: 'light', notifications: true },
        isLoading: false,
        error: null,
      }),
    },
    update: {
      useMutation: () => ({
        mutate: (_: unknown) => {},
      }),
    },
  },
};

// withTRPC HOC (no JSX)
export function withTRPC<TProps = unknown>(App: React.ComponentType<TProps>) {
  return function WithTrpc(props: TProps) {
    const qcRef = (React as any).useRef<QueryClient | null>(null);
    if (!qcRef.current) qcRef.current = new QueryClient();
    return React.createElement(
      QueryClientProvider as any,
      { client: qcRef.current },
      React.createElement(App as any, props as any)
    );
  };
}
`;

// ---------- MAIN ----------

(function main() {
  ensureDir(matrixRoot);
  ensureDir(configDir);
  ensureDir(trpcDir);
  ensureDir(setupDir);

  if (!ONLY || ONLY === 'config') {
    // Make real differences across C1..C5
    const configs = [
      { file: 'C1-jsdom-forks-narrow.ts',   env: 'jsdom',    pool: 'forks'   },
      { file: 'C2-jsdom-threads-narrow.ts', env: 'jsdom',    pool: 'threads' },
      { file: 'C3-happydom-forks-narrow.ts',env: 'happy-dom',pool: 'forks'   },
      { file: 'C4-jsdom-forks-narrow-g.ts', env: 'jsdom',    pool: 'forks'   }, // same as C1, keep for breadth
      { file: 'C5-happydom-threads-narrow.ts', env: 'happy-dom', pool: 'threads' },
    ];

    for (const c of configs) {
      const out = path.join(configDir, c.file);
      const content = configTs({
        name: `tools/vitest-matrix/config/${c.file}`,
        environment: c.env,
        pool: c.pool,
      });
      writeFileNice(out, content);
    }
  }

  if (!ONLY || ONLY === 'trpc') {
    writeFileNice(path.join(trpcDir, 'T1-trpc-stub.ts'), trpcStub);
  }

  if (!ONLY || ONLY === 'setup') {
    if (!fs.existsSync(setupFile)) {
      log(`! Skipping setup seeds: cannot find ${rel(setupFile)}`);
    } else {
      const seed = fs.readFileSync(setupFile, 'utf8');
      const seeds = [
        'S0-bulletproof-jestdom.ts',
        'S1-vitest-jestdom.ts',
        'S2-plain-jestdom-manual-extend.ts',
        'S3-vitest-jestdom-plus-jsx.ts',
        'S4-plain-jestdom-plus-jsx.ts',
      ];
      for (const fname of seeds) {
        writeFileNice(path.join(setupDir, fname), `${header(`tools/vitest-matrix/setup/${fname}`)}${seed}`);
      }
    }
  }

  log('\nDone. Variants ready under tools/vitest-matrix/.');
  log('Next: node tools/scripts/vitest-matrix.cjs --clean-between --heapMB=6144');
})();
