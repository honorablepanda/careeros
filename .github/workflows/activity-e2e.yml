name: Activity E2E

on:
  pull_request:
  push:
    branches: [ main ]

concurrency:
  group: activity-e2e-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e:
    name: e2e
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install
        run: pnpm -w install --no-frozen-lockfile

      # ---- Prisma: discover & validate/generate for all schemas (non-fatal if none) ----
      - name: Prisma format/validate (all schemas)
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t SCHEMAS < <(git ls-files -z | tr '\0' '\n' | grep -E "/prisma/schema\.prisma$" || true)
          if [ ${#SCHEMAS[@]} -eq 0 ]; then
            echo "::notice ::No prisma/schema.prisma found; skipping Prisma format/validate"
            exit 0
          fi
          for s in "${SCHEMAS[@]}"; do
            echo "Formatting & validating $s"
            pnpm -w exec prisma format --schema="$s"
            pnpm -w exec prisma validate --schema="$s"
          done

      - name: Generate Prisma Client (all schemas)
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t SCHEMAS < <(git ls-files -z | tr '\0' '\n' | grep -E "/prisma/schema\.prisma$" || true)
          if [ ${#SCHEMAS[@]} -eq 0 ]; then
            echo "::notice ::No prisma/schema.prisma found; skipping Prisma generate"
            exit 0
          fi
          for s in "${SCHEMAS[@]}"; do
            echo "Generating client for $s"
            pnpm -w exec prisma generate --schema="$s"
          done

      # ---- Build only the web app (donâ€™t traverse the whole repo) ----
      - name: Build web
        working-directory: web
        run: pnpm run build

      # ---- Playwright (browsers) ----
      - name: Install Playwright (browsers)
        working-directory: web
        run: pnpm exec playwright install --with-deps

      # If your Playwright config uses a dev server, you can start it here
      # and wait for it, then run tests. Otherwise, tests can start the server.
      # - name: Start web app
      #   working-directory: web
      #   run: |
      #     pnpm run start &>/dev/null &
      # - name: Wait for app
      #   run: npx wait-on http://localhost:3000

      # ---- Run E2E from web/ only (prevents Playwright from seeing repo-wide specs) ----
      - name: Run E2E
        working-directory: web
        run: pnpm exec playwright test --config=playwright.config.ts

      # ---- Upload Playwright artifacts (always) ----
      - name: Upload Playwright artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          if-no-files-found: ignore
          retention-days: 7
          path: |
            web/playwright-report
            web/test-results
            web/playwright/.cache
